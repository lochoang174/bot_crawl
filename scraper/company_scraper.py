import time
import random
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from services.human_behavior import HumanBehaviorSimulator 
from typing import List, Dict, Optional

import json
import os
class LinkedInCompanyScraper:
    """Scraper cho th√¥ng tin c√¥ng ty v√† nh√¢n vi√™n"""
    
    def __init__(self, driver):
        self.driver = driver
        self.wait = WebDriverWait(driver, 20)
    
    def click_show_more_button(self, timeout: int = 10) -> bool:
        """T√¨m v√† click n√∫t 'Show more results'"""
        try:
            show_more_button_xpath = "//button[.//span[normalize-space()='Show more results' or normalize-space()='Hi·ªÉn th·ªã th√™m k·∫øt qu·∫£']]"
            print("üîç ƒêang t√¨m n√∫t 'Show more results'...")
            wait = WebDriverWait(self.driver, timeout)
            button = wait.until(
                EC.element_to_be_clickable((By.XPATH, show_more_button_xpath))
            )
            print("‚úÖ T√¨m th·∫•y n√∫t 'Show more results'.")
            try:
                ActionChains(self.driver).move_to_element(button).pause(0.5).click().perform()
                print("‚úÖ ƒê√£ click n√∫t b·∫±ng ActionChains.")
            except Exception:
                print("‚ö†Ô∏è ActionChains th·∫•t b·∫°i, th·ª≠ click b·∫±ng JavaScript...")
                self.driver.execute_script("arguments[0].click();", button)
                print("‚úÖ ƒê√£ click n√∫t b·∫±ng JavaScript.")
            print("‚è≥ ƒêang ch·ªù n·ªôi dung m·ªõi t·∫£i...")
            time.sleep(random.uniform(3, 5))
            return True
        except TimeoutException:
            print("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t 'Show more results' ho·∫∑c n√∫t kh√¥ng th·ªÉ click trong th·ªùi gian ch·ªù.")
            return False
        except Exception as e:
            print(f"‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}")
            return False
    
    def expand_and_collect_all_urls(self, company_url: str) -> List[Dict]:
        """M·ªü r·ªông danh s√°ch nh√¢n vi√™n v√† thu th·∫≠p t·∫•t c·∫£ URL profile"""
        try:
            print(f"üåê Truy c·∫≠p trang people c·ªßa c√¥ng ty: {company_url}")
            self.driver.get(company_url)
            HumanBehaviorSimulator.random_delay(5, 8)
            
            print("\nüöÄ B·∫Øt ƒë·∫ßu Giai ƒëo·∫°n 1: M·ªü r·ªông danh s√°ch b·∫±ng c√°ch click 'Show More'...")
            click_count = 0
            max_clicks = 99
            
            while click_count < max_clicks:
                was_button_clicked = self.click_show_more_button(timeout=7)
                if was_button_clicked:
                    click_count += 1
                    print(f"üëç ƒê√£ click 'Show More' l·∫ßn th·ª© {click_count}.")
                    HumanBehaviorSimulator.random_delay(2, 4)
                else:
                    print("üèÅ Ho√†n t·∫•t m·ªü r·ªông! Kh√¥ng c√≤n n√∫t 'Show More'.")
                    break
            
            if click_count >= max_clicks:
                print(f"‚ö†Ô∏è ƒê√£ ƒë·∫°t gi·ªõi h·∫°n {max_clicks} l·∫ßn click.")

            print("\nüöÄ B·∫Øt ƒë·∫ßu Giai ƒëo·∫°n 2: Thu th·∫≠p t·∫•t c·∫£ profile URLs...")
            print("...cu·ªôn trang ƒë·ªÉ ƒë·∫£m b·∫£o t·∫•t c·∫£ profiles ƒë·ªÅu ƒë∆∞·ª£c t·∫£i...")
            HumanBehaviorSimulator.scroll_to_bottom(self.driver)
            HumanBehaviorSimulator.random_delay(3, 5)

            return self._collect_profile_urls()

        except Exception as e:
            print(f"‚ùå L·ªói nghi√™m tr·ªçng trong h√†m expand_and_collect_all_urls: {e}")
            import traceback
            traceback.print_exc()
            return []
    
    def _collect_profile_urls(self) -> List[Dict]:
        """Thu th·∫≠p c√°c URL profile t·ª´ trang"""
        try:
            profile_urls = []
            ul_element = WebDriverWait(self.driver, 15).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, 'ul.display-flex.list-style-none.flex-wrap'))
            )
            a_tags = ul_element.find_elements(By.TAG_NAME, 'a')
            print(f"üîç T√¨m th·∫•y t·ªïng c·ªông {len(a_tags)} th·∫ª <a> sau khi m·ªü r·ªông.")

            for a in a_tags:
                href = a.get_attribute("href")
                name_and_title = a.text.strip().replace('\n', ' ')
                if href and "/in/" in href and "linkedin.com" in href:
                    profile_urls.append({'url': href, 'text': name_and_title})

            # Lo·∫°i b·ªè duplicate
            seen_urls = set()
            unique_profiles = []
            for profile in profile_urls:
                if profile['url'] not in seen_urls:
                    seen_urls.add(profile['url'])
                    unique_profiles.append(profile)
            
            print(f"‚úÖ Thu th·∫≠p ƒë∆∞·ª£c {len(unique_profiles)} profile unique.")
            return unique_profiles

        except Exception as e:
            print(f"‚ùå L·ªói khi thu th·∫≠p danh s√°ch profile cu·ªëi c√πng: {e}")
            return []


