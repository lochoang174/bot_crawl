import time
import random
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import json
import os
from selenium import webdriver
from selenium.webdriver.edge.options import Options as EdgeOptions
class ChromeDriverManager:
    """Qu·∫£n l√Ω vi·ªác t·∫°o v√† c·∫•u h√¨nh Chrome Driver"""
    
    def __init__(self, profile_name: str = "linkedin_profile"):
        self.profile_name = profile_name
        self.profile_path = os.path.abspath(profile_name)
        
        # Danh s√°ch User-Agent ph·ªï bi·∫øn v√† m·ªõi nh·∫•t
        self.user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        ]
    def get_random_user_agent(self):
        """L·∫•y User-Agent ng·∫´u nhi√™n t·ª´ danh s√°ch"""
        return random.choice(self.user_agents)
    def create_undetected_driver_with_session(self):
        """T·∫°o undetected ChromeDriver v·ªõi profile ƒë·ªÉ l∆∞u session"""
        print("ƒêang kh·ªüi t·∫°o Undetected ChromeDriver v·ªõi session...")
        
        # T·∫°o th∆∞ m·ª•c profile n·∫øu ch∆∞a c√≥
        if not os.path.exists(self.profile_path):
            os.makedirs(self.profile_path)
            print(f"‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c profile: {self.profile_path}")
        
        options = uc.ChromeOptions()
        
        # S·ª≠ d·ª•ng profile ƒë·ªÉ l∆∞u session
        options.add_argument(f"--user-data-dir={self.profile_path}")
        options.add_argument("--profile-directory=Default")
        # user_agent = self.get_random_user_agent()
        # options.add_argument(f"--user-agent={user_agent}")
        # print(f"üîß S·ª≠ d·ª•ng User-Agent: {user_agent}")
        prefs = {
            "intl.accept_languages": "en,en_US",
            "translate.enabled": False,
            "translate_whitelists": {"vi": "en"},
        }
        options.add_experimental_option("prefs", prefs)
        
        # C√°c option kh√°c ƒë·ªÉ tr√°nh detection
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_argument("--disable-web-security")
        options.add_argument("--allow-running-insecure-content")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        
        try:
            driver = uc.Chrome(options=options)
            print("‚úÖ Kh·ªüi t·∫°o driver th√†nh c√¥ng v·ªõi session profile")
            return driver
        except Exception as e:
            print(f"‚ùå L·ªói khi kh·ªüi t·∫°o driver: {e}")
            return None

    def create_edge_driver_with_session(self):
            print("ƒêang kh·ªüi t·∫°o Microsoft Edge Driver v·ªõi session...")

            if not os.path.exists(self.profile_path):
                os.makedirs(self.profile_path)
                print(f"‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c profile: {self.profile_path}")

            options = EdgeOptions()

            # S·ª≠ d·ª•ng user profile (Edge d√πng chung format v·ªõi Chrome)
            options.add_argument(f"--user-data-dir={self.profile_path}")
            options.add_argument("--profile-directory=Default")
            
            # Th√™m c√°c t√πy ch·ªçn gi·ªëng nh∆∞ b·∫°n d√πng cho Chrome
            options.add_argument("--disable-blink-features=AutomationControlled")
            options.add_argument("--disable-web-security")
            options.add_argument("--allow-running-insecure-content")
            options.add_argument("--no-sandbox")
            options.add_argument("--disable-dev-shm-usage")

            try:
                driver = webdriver.Edge(options=options)
                print("‚úÖ Kh·ªüi t·∫°o Edge driver th√†nh c√¥ng v·ªõi session profile")
                return driver
            except Exception as e:
                print(f"‚ùå L·ªói khi kh·ªüi t·∫°o Edge driver: {e}")
                return None